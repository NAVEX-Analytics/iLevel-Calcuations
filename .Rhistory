FROM
pse__Milestone__c
WHERE
Account__r.Test_Account__c = FALSE
AND pse__Status__c IN (
'Active',
'Delayed Active',
'Delayed On-Hold',
'Not Started',
'Pending Termination',
'Pipeline')
AND Product__r.Family IN (
'AlertLine',
'Disclosure Management',
'EP Hotline',
'EP Incident Management',
'ESG',
'GRC Insights',
'IntegriLink',
'NG Compliance Training',
'NG Gateway',
'NG Policy Management',
'RiskRate',
'Suite Compliance Training',
'Suite Hotline',
'Suite Incident Management',
'Suite Policy Management',
'Suite Survey',
'Telephony',
'WhistleB')
AND Product__r.GL_Group__c IN (
'Other Services',
'Required Setup',
'Professional Services')
AND pse__Project__r.pse__Is_Template__c = FALSE
AND pse__Project__r.pse__Group__r.Name IN ('Implementation', 'Professional Services')")
on_time_completion_query <- paste("SELECT
Milestone_ID_18__c,
Name,
pse__Project__r.pse__Group__r.Name,
Product__r.Family,
pse__Status__c,
Total_Planned_Hours__c,
pse__Planned_Hours__c,
Total_Approved_Hours__c,
Planned_vs_Client_Billable_Hours__c,
Milestone_On_Time_TD__c,
Calculated_Duration_days__c,
Milestone_PM__r.Name,
Milestone_PM__r.pse__Group__r.Name,
Milestone_PM__r.pse__Region__r.Name,
Milestone_PM_s_Manager__r.Name,
Account__r.Reporting_Region__c,
Account__r.Account_Owner_Region_CSO_Reporting__c,
Actual_Go_Live__c
FROM
pse__Milestone__c
WHERE
Account__r.Test_Account__c = FALSE
AND pse__Status__c = 'Complete'
AND pse__Project__r.pse__Project_Status__c != 'Terminated'
AND Actual_Go_Live__c >= ", from_date, "
AND Actual_Go_Live__c <= ", to_date, "
AND pse__Project__r.pse__Group__r.Name IN ('Professional Services', 'Implementation')
AND Product__r.Family IN (
'AlertLine',
'Disclosure Management',
'EP Hotline',
'EP Incident Management',
'ESG',
'GRC Insights',
'IntegriLink',
'Lockpath',
'NG Compliance Training',
'NG Gateway',
'NG Policy Management',
'RiskRate',
'Suite Compliance Training',
'Suite Hotline',
'Suite Incident Management',
'Suite Policy Management',
'Suite Survey',
'Telephony',
'WhistleB')")
cases_query <- paste0("SELECT Id,
Client_Care_Team__c,
Age_Days__c,
Skill__c,
Record_Type__c,
CreatedDate,
ClosedDate,
Account.Reporting_Region__c,
Owner__r.Name,
Owner__r.Location__c
FROM
Case
WHERE
Record_Type__c IN ('Customer Support Requests', 'Discontinued Client')
AND Status != 'Duplicate'
AND (Account.Test_Account__c = FALSE OR Account.Id = '0015000000iMvunAAC')
AND Client_Care_Team__c != 'NetClaim'
AND ((CreatedDate >= ", from_date, "T00:00:00Z AND CreatedDate <= ", to_date, "T00:00:00Z)
OR(ClosedDate >= ", from_date, "T00:00:00Z AND ClosedDate <= ", to_date, "T00:00:00Z))"
)
cases_backlog_query <- ("SELECT Id,
Client_Care_Team__c,
Age_Days__c,
Skill__c,
Record_Type__c,
CreatedDate,
ClosedDate,
Account.Reporting_Region__c,
Owner__r.Name,
Owner__r.Location__c
FROM
Case
WHERE
Record_Type__c IN ('Customer Support Requests')
AND Status != 'Duplicate'
AND (Account.Test_Account__c = FALSE OR Account.Id = '0015000000iMvunAAC')
AND Client_Care_Team__c != 'NetClaim'
AND Skill__c != 'RiskRate - Renewals'
AND Defect_Enhancement__c = FALSE
AND IsClosed = FALSE
")
cases_milestones_query <- paste0("SELECT Id,
Case.Id,
ElapsedTimeInHrs,
ElapsedTimeInDays,
MilestoneType.Name,
Case.Client_Care_Team__c,
Case.Skill__c,
Case.Account.Reporting_Region__c,
Case.ClosedDate,
Case.Owner__r.Name,
Case.Owner__r.Location__c,
Case.Account.Customer_Success_Account__c
FROM
CaseMilestone
WHERE
MilestoneType.Name LIKE '%Resolution%'
AND Case.Record_Type__c = 'Customer Support Requests'
AND Case.Status != 'Duplicate'
AND Case.Defect_Enhancement__c = FALSE
AND Case.ClosedDate >= ", from_date, "T00:00:00Z
AND Case.Skill__c != 'RiskRate - Renewals'
AND Case.Account.Test_Account__c = FALSE")
utilization_query <- paste("SELECT
Utilization_Calculation_Name__c,
pse__Historical_Start_Date__c,
pse__Historical_End_Date__c,
pse__Utilization_Calculation__r.pse__Time_Period_Types__c,
pse__Historical_Utilization__c,
pse__Historical_Utilization_Billable_Only__c,
pse__Historical_Calendar_Hours__c,
pse__Historical_Billable_Hours__c,
Historical_Client_Non_Billable__c,
pse__Historical_Non_Billable_Hours__c,
pse__Resource__r.Name,
pse__Resource__r.pse__Salesforce_User__r.Manager.Name,
pse__Resource__r.pse__Region__r.Name,
pse__Resource__r.pse__Group__r.Name,
pse__Resource__r.pse__Start_Date__c
FROM
pse__Utilization_Detail__c
WHERE
pse__Historical_Utilization_Billable_Only__c > 0
AND pse__Historical_Start_Date__c = ", from_date, "
AND pse__Utilization_Calculation__r.pse__Time_Period_Types__c = 'Month'
AND pse__Resource__r.pse__Start_Date__c <= ", Sys.Date(), "
AND pse__Resource__r.pse__Group__r.Name IN (
'Implementation',
'Professional Services',
'Customer Support',
'Customer Interface',
'Technical Specialist',
'Telecom',
'Quality Assurance',
'Lockpath - CS',
'Lockpath - IS',
'Lockpath - PS',
'WhistleB - CS',
'WhistleB - IS',
'WhistleB - PS')")
util_pto_query <- paste("SELECT
pse__Start_Date__c,
pse__End_Date__c,
pse__Status__c,
pse__Total_Hours__c,
pse__Milestone__r.Name,
pse__Resource__r.Full_Name__c,
pse__Resource__r.pse__Salesforce_User__r.Manager.Name,
pse__Resource__r.pse__Group__r.Name
FROM
pse__Timecard__c
WHERE
pse__Milestone__r.Name = 'Time Off'
AND pse__Status__c = 'Approved'
AND pse__Resource__r.pse__Exclude_From_Time_Calculations__c = FALSE
AND pse__Start_Date__c >= ", from_date, "
AND pse__Start_Date__c <= ", to_date, "
AND pse__Resource__r.pse__Group__r.Name IN (
'Implementation',
'Professional Services',
'Customer Support',
'Customer Interface',
'Technical Specialist',
'Telecom',
'Quality Assurance',
'Lockpath - CS',
'Lockpath - IS',
'Lockpath - PS',
'WhistleB - CS',
'WhistleB - IS',
'WhistleB - PS')")
## Queries
sf_auth(username = auth$username, password = auth$password, security_token = auth$security_token)
arr_risk <- sf_query(arr_risk_query)
issues <- sf_query(issues_query)
qlb <- sf_query(qualified_leads_query)
surveys <- sf_query(surveys_query)
proj_hours_sold <- sf_query(proj_hours_sold_query)
proj_hours_complete <- sf_query(proj_hours_complete_query)
proj_hours_overages <- sf_query(proj_hours_overages_query)
proj_hours_backlog <- sf_query(proj_hours_backlog_query)
on_time_completion <- sf_query(on_time_completion_query)
cases <- sf_query(cases_query)
cases_backlog <- sf_query(cases_backlog_query)
cases_milestones <- sf_query(cases_milestones_query)
util <- sf_query(utilization_query)
util_pto <- sf_query(util_pto_query)
cases_pre <- cases %>%
rename(
product_team = Client_Care_Team__c,
close_date = ClosedDate,
opened_date = CreatedDate,
type = Record_Type__c,
skill = Skill__c,
reporting_region = Account.Reporting_Region__c,
location = Owner__r.Location__c,
owner_name = Owner__r.Name,
case_age = Age_Days__c
) %>%
mutate(Month = floor_date(close_date, unit="month"),
Product = case_when(
type == "Customer Support Requests" & grepl("EthicsPoint|Telephony", product_team) ~ "EthicsPoint",
type == "Customer Support Requests" & grepl("PolicyTech", product_team) ~ "PolicyTech",
type == "Customer Support Requests" & grepl(" Training", product_team)~ "NAVEXEngage",
type == "Customer Support Requests" & grepl("RiskRate", product_team) ~ "RiskRate",
type == "Customer Support Requests" & grepl("Disclosures", product_team) ~ "Disclosures",
type == "Customer Support Requests" & grepl("WhistleB", product_team) ~ "WhistleB",
type == "Customer Support Requests" & grepl("ESG", product_team) ~ "ESG",
type == "Customer Support Requests" & product_team == TRUE ~ "Other",
type == "Discontinued Client" ~ "Discontinuation")
)
cases_opened <- cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region = "Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
)
)
View(cases_opened)
cases_opened <- cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region = "Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
)
) %>%
bind_cols(
cases_pre %>%
filter(between(close_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(close_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region="Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
)
)
)
cases_opened <- cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region = "Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
)
) %>%
bind_cols(
cases_pre %>%
filter(between(close_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(close_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region="Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_closed = n()
)
)
)
cases_opened <- cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region = "Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
)
) %>%
bind_cols(
cases_pre %>%
filter(between(close_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_closed = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(close_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region="Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_closed = n()
)
)
)
cases_opened <- cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region = "Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
)
) %>%
bind_cols(
cases_pre %>%
filter(between(close_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_closed = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(close_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region="Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_closed = n()
)
) %>% select(cases_closed)
)
cases_opened <- cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region = "Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
)
) %>%
bind_cols(
cases_pre %>%
filter(between(close_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_closed = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(close_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region="Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_closed = n()
) %>% select(cases_closed)
)
)
cases_opened <- cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region = "Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
)
) %>%
bind_cols(
cases_pre %>%
filter(between(close_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_closed = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(close_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region="Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_closed = n()
)
) %>% select(cases_closed)
)
cases %>% group_by(Client_Care_Team__c) %>% summarize(count = n())
cases_opened <- cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(opened_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region = "Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_opened = n()
)
) %>%
bind_cols(
cases_pre %>%
filter(between(close_date, as.Date(from_date), as.Date(to_date))) %>%
group_by(reporting_region, Product) %>%
summarize(
cases_closed = n()
) %>%
bind_rows(
cases_pre %>%
filter(between(close_date, as.Date(from_date), as.Date(to_date))) %>%
mutate(reporting_region="Total") %>%
group_by(reporting_region, Product) %>%
summarize(
cases_closed = n()
)
) %>%
select(cases_closed)
) %>%
select(-reporting_region...4)
# CRAN Packages
suppressPackageStartupMessages({
library(data.table)
library(tidyverse)
library(salesforcer)
library(yaml)
library(rlang)
library(lubridate)
library(openxlsx)
library(readxl)
})
auth <- yaml.load_file("secrets.yml")
config <- yaml.load_file("config.yml")
testq <- sf_query("SELECT CommentBody__c,CreatedById,CreatedDate FROM Case_Comment__c WHERE Case__c = '500Hs000027KThQIAW'")
